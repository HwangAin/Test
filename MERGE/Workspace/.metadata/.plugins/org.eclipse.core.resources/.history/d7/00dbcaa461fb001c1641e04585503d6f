package student;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;



public class StudentDAO {
	
	Connection conn; // 연결객체
	PreparedStatement ps; //전송객체
	ResultSet rs; //결과객체
	
	public Connection getConn() {
		String url = "jdbc:oracle:thin:@221.144.89.105:3301:XE";
		String user = "hanul";
		String password = "0000";
		//oracle.jdbc.driver.OracleDriver ※이거 꼭!! 확인 하기!!
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			conn = DriverManager.getConnection(url, user, password);
			
		} catch (Exception e) {//전체 Exception으로 바꿔주기 
			e.printStackTrace();
			System.out.println("getConn Error!!!");
		} 
		return conn;
	}//getConn()
	
	public void dbClose() {
		try {
			if (rs != null) {
				rs.close();
			}
			if (ps != null) {
				ps.close();
			}
			if (conn != null) {
				conn.close(); 
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}//dbClose()

//	ArrayList<StudentDTO> 를 10건 리턴하는 메소드 작성
//	getManualList();

//	접근제한자 리턴타입 메소드이름() {
//	}
	public void selectOne() {
		getConn();
//		String sql = " SELECT u.student_no, s.student_name, u.user_id, u.last_name, u.first_name FROM user_info u LEFT OUTER JOIN student s ON u.student_no = s.student_no ";
		String sql = " SELECT 1 as num1 FROM dual ";
		try {
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				System.out.println(rs.getInt("num1"));
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("selectOne !!!");
		} finally {
			dbClose();
		}
	}
	
	public ArrayList<StudentDTO> getList() {
		ArrayList<StudentDTO> list = new ArrayList<>();
		conn = getConn();
		String sql = " SELECT u.*, s.student_name FROM user_info u LEFT OUTER JOIN student s ON u.student_no = s.student_no ";
		try {
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while ( rs.next() ) {
				
					list.add(new StudentDTO(rs.getInt("student_no"), rs.getString("student_name"), 
							rs.getString("user_id"), rs.getString("user_pw"), rs.getString("first_name"), rs.getString("last_name")));
//					System.out.println(rs.getInt("student_no")+rs.getString("student_name")+rs.getString("user_id")
//						+rs.getString("user_pw")+rs.getString("last_name")+rs.getString("first_name"));
			}
			System.out.println(list.size());
			
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("SOS!!getList!!");
		} finally {
			dbClose();
		}
		return list;
	}
	
	
	//ArrayList<StudentDTO> list
	public StudentDTO getStudentInfo(int student_no, String user_id) {// 해당
		StudentDTO dto = new StudentDTO(0,"","","","","");
//		int student_no, String student_name, String user_id, String user_pw, String first_name, String last_name
		
		conn = getConn();
		String sql = " SELECT * FROM user_info WHERE student_no = ? AND user_id = ? ";
		try {
			ps = conn.prepareStatement(sql);
			ps.setInt(1, student_no);
			ps.setString(2, user_id);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto.setStudent_no(rs.getInt("student_no"));
				dto.setStudent_name(rs.getString("student_name"));
				dto.setStudent_name(rs.getString("user_id"));
				dto.setStudent_name(rs.getString("user_pw"));
				dto.setStudent_name(rs.getString("first_name"));
				dto.setStudent_name(rs.getString("last_name"));
				
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		
		
		
		
		return dto;
	}
	
//	public ArrayList<StudentDTO> getManualList() {//정보 
//		StudentDTO dto = new StudentDTO();
//		↑객체를 새로 생성을 하면 list.add(dto); 로 넣어줘야하고
//		list.add(new StudentDTO(11, "HTJ", "123", "Taeja", "Hwang"));
//		list.add(new) ← new 로 바로 생성을 하면 되니 이렇게 만들어주자!!
		

//		ArrayList<StudentDTO> list = new ArrayList<>();
//		for(int i = 0; i <= 10; i++) {
//			list.add(new StudentDTO("황아인", "HTJ", "123", "Taeja", "Hwang", 11));//이렇게 바로 들어가도 된다.
//		}
//		return list;
//	}
	
	
	
}
